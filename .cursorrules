# Global Cursor Rules - Terrace Project

## Agent System Overview
This project uses a multi-agent system where specialized Claude agents handle different aspects of development. All agents MUST follow these global rules.

## Core Principles

### 1. Scope Restriction
- Agents can ONLY modify files within this project directory
- NO CI/CD management or repository operations (git push, pull requests, etc.)
- NO external system modifications

### 2. Cursor Rules Maintenance
- **CRITICAL**: All agents must keep .cursorrules files up to date in their respective directories
- When changing architecture, patterns, or conventions, UPDATE the relevant .cursorrules
- Check for .cursorrules in the current directory before making significant changes
- If a .cursorrules file contradicts these global rules, global rules take precedence

### 3. Technology Stack
- **Backend**: NestJS with TypeScript (all agents MUST be NestJS experts)
- **Database**: PostgreSQL with TypeORM
- **Frontend**: React with TypeScript and Vite
- **Runtime**: Bun (for scripts and package management)
- **Process Manager**: mprocs (backend and frontend run concurrently)
- **E2E Testing**: Playwright with MCP browser access
- **Graph Models**: Node-edge graph structures are core to the business logic

### 4. Code Quality Standards
- Use TypeScript strict mode
- Follow functional programming principles where appropriate
- Prefer composition over inheritance
- Write self-documenting code with clear naming
- Add JSDoc comments for public APIs and complex logic
- Use async/await over Promise chains
- Handle errors explicitly - no silent failures

### 5. File Organization
```
terrace/
├── backend/          # NestJS API (REST API Agent, DB Agent, Business Logic Agent)
├── frontend/         # React UI (Frontend Architect Agent)
├── scripts/          # Bun scripts (DevOps Agent)
├── docs/             # Documentation (Project Manager Agent)
└── .claude/agents/   # Agent definitions
```

### 6. Testing Requirements

**Development Environment**:
- Server is ALWAYS assumed to be running via `bun run dev` (mprocs)
- Backend runs at `http://localhost:3000`
- Frontend runs at `http://localhost:5173`
- Tests should be single-run commands that execute against the live server

**Test Types**:
- **Unit Tests**: Write for business logic, services, and utilities
- **Integration Tests**: Write for API endpoints (test against running server)
- **E2E Tests**: Use Playwright with MCP browser access
- **Graph Tests**: Test graph operations thoroughly
- Mock external dependencies only (not internal services)

**E2E Testing with Playwright**:
- Agents have MCP browser access for interactive testing
- Tests run against live development server
- Use `bun run test:e2e` for headless tests
- Use `bun run test:e2e:ui` for interactive UI mode
- Tests validate full user flows and API integration

### 7. Database & ORM Guidelines
- All graph data MUST use proper relational models
- Nodes and edges should have dedicated tables
- Use TypeORM decorators properly
- Include migrations for all schema changes
- Index graph traversal fields appropriately

### 8. API Design
- Follow RESTful conventions
- Use proper HTTP status codes
- Validate input with class-validator
- Return consistent error formats
- Version APIs when breaking changes occur

### 9. React & Frontend
- Use functional components with hooks
- Implement proper error boundaries
- Use TypeScript interfaces for all props
- Keep components small and focused
- Separate business logic from presentation

### 10. Documentation
- Update README.md files when changing project structure
- Document all environment variables
- Maintain API documentation
- Keep agent responsibilities documented

## Agent Interaction Protocol

### Before Making Changes
1. Read the local .cursorrules for your domain
2. Understand existing patterns in the codebase
3. Check if changes affect other agent domains

### After Making Changes
1. Update relevant .cursorrules if patterns changed
2. Update documentation if public APIs changed
3. Update tests to reflect changes
4. Create a git commit with a concise 1-5 sentence summary

### Cross-Agent Communication
- Agents work independently but follow shared conventions
- Changes that affect multiple domains should be documented in commit message
- Breaking changes must be highlighted in commit messages

### Completing Tasks
When all tasks are complete:
1. Create a git commit summarizing changes (1-5 sentences)
2. DO NOT write summary files, changelogs, or accomplishment documents
3. Save tokens by keeping output concise

## Prohibited Actions
- ❌ Modifying files outside this project
- ❌ Running git push or CI/CD operations
- ❌ Installing global dependencies
- ❌ Modifying system configurations
- ❌ Ignoring TypeScript errors
- ❌ Committing without updating relevant .cursorrules
- ❌ Writing summary files, changelogs, or accomplishment documents
- ❌ Creating SUMMARY.md, CHANGELOG.md, or similar files after completing work

## Development Workflow

### Running the Application
- **Start all services**: `bun run dev` (uses mprocs)
- **mprocs** manages backend and frontend concurrently
- Backend and frontend auto-reload on file changes
- Tests assume servers are running

### Testing Strategy
- **Unit/Integration Tests**: Run with `bun run test` (single execution)
- **E2E Tests**: Run with `bun run test:e2e` (Playwright against live server)
- **Interactive E2E**: Use `bun run test:e2e:ui` for debugging
- **Validation**: Agents can use MCP browser to test features interactively

### NestJS Expertise Required
All agents working with backend code MUST:
- Understand NestJS module system and dependency injection
- Know decorators: `@Controller`, `@Injectable`, `@Module`, etc.
- Follow NestJS best practices for services, controllers, and providers
- Understand NestJS lifecycle hooks and middleware
- Know how to use NestJS testing utilities

## Required Actions
- ✅ Keep .cursorrules synchronized with code
- ✅ Write TypeScript with strict typing
- ✅ Test graph operations thoroughly
- ✅ Document public APIs
- ✅ Follow the DRY principle
- ✅ Use semantic naming
- ✅ Handle errors gracefully
- ✅ Be a NestJS expert (for backend agents)
- ✅ Assume servers are running when testing
- ✅ Create git commits with concise summaries (1-5 sentences)
- ✅ Avoid writing summary files to save tokens
